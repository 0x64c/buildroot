From 411f05921d0d80cd62f9aeddbce4594f02f722d1 Mon Sep 17 00:00:00 2001
From: Paul Cercueil <paul@crapouillou.net>
Date: Sat, 12 Jun 2021 12:32:46 +0100
Subject: [PATCH 1/3] SDL_joystick: Add "translator" joystick driver

It permits to create a virtual joystick device created from more than
one input source (e.g. other joysticks, and/or keyboard).

This driver is configured using the "SDL_JOYSTICK_TRANSLATOR_MAP"
environment variable. This environment variable is expected to be set
by the operating system.

For instance, on the OpenDingux handhelds running Linux (GCW-Zero,
Anbernic RG-350, etc), where there is one input device per analog stick
plus one input device for the face buttons, this driver permits to
create a virtual joystick device that will feature all the analog
sticks, the d-pad, and face buttons in one single SDL_joystick.

The "SDL_JOYSTICK_TRANSLATOR_MAP" is a semicolon-separated list of
device mappings. Each device mapping is a comma-separated list of the
device's name followed by input mappings. Input mappings can be:

- axis:<joystick_id>:<joystick_axis>
- hat:<joystick_id>:<joystick_hat>
- hat:kb:<scancode_up>:<scancode_right>:<scancode_down>:<scancode_left>
- btn:<joystick_id>:<joystick_btn>
- btn:kb:<scancode>

For instance, for the GCW-Zero, the SDL_JOYSTICK_TRANSLATOR_MAP will be
(carriage returns added for lisibility):

SDL_JOYSTICK_TRANSLATOR_MAP="OpenDingux GCW-Zero Virtual Device,
                             axis:190000006a6f79737469636b73000000:0,
                             axis:190000006a6f79737469636b73000000:1,
                             axis:190000006a6f79737469636b73000000:2,
                             axis:190000006a6f79737469636b73000000:3,
                             btn:kb:224,
                             btn:kb:226,
                             btn:kb:225,
                             btn:kb:44,
                             btn:kb:40,
                             btn:kb:41,
                             btn:kb:43,
                             btn:kb:42,
                             btn:kb:75,
                             btn:kb:78,
                             btn:kb:84,
                             btn:kb:99,
                             hat:kb:82:79:81:80"

Signed-off-by: Paul Cercueil <paul@crapouillou.net>
---
 CMakeLists.txt                           |   6 +
 configure.ac                             |  21 +
 include/SDL_config.h.cmake               |   1 +
 include/SDL_config.h.in                  |   1 +
 include/SDL_config_android.h             |   1 +
 include/SDL_config_iphoneos.h            |   1 +
 include/SDL_config_macosx.h              |   1 +
 include/SDL_config_os2.h                 |   1 +
 include/SDL_config_pandora.h             |   1 +
 include/SDL_config_psp.h                 |   1 +
 include/SDL_config_windows.h             |   1 +
 include/SDL_config_winrt.h               |   1 +
 include/SDL_config_wiz.h                 |   1 +
 src/joystick/SDL_joystick.c              |   3 +
 src/joystick/SDL_sysjoystick.h           |   1 +
 src/joystick/translator/SDL_translator.c | 492 +++++++++++++++++++++++
 16 files changed, 534 insertions(+)
 create mode 100644 src/joystick/translator/SDL_translator.c

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 26fe83205f..a27c197023 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -418,6 +418,7 @@ option_string(BACKGROUNDING_SIGNAL "number to use for magic backgrounding signal
 option_string(FOREGROUNDING_SIGNAL "number to use for magic foregrounding signal or 'OFF'" "OFF")
 set_option(HIDAPI              "Use HIDAPI for low level joystick drivers" ${OPT_DEF_HIDAPI})
 set_option(JOYSTICK_VIRTUAL    "Enable the virtual-joystick driver" ON)
+set_option(JOYSTICK_TRANSLATOR "Enable the translated-joystick driver" ON)
 set_option(ASAN                "Use AddressSanitizer to detect memory errors" OFF)
 
 set(SDL_SHARED ${SDL_SHARED_ENABLED_BY_DEFAULT} CACHE BOOL "Build a shared version of the library")
@@ -961,6 +962,11 @@ if(SDL_JOYSTICK)
     file(GLOB JOYSTICK_VIRTUAL_SOURCES ${SDL2_SOURCE_DIR}/src/joystick/virtual/*.c)
     set(SOURCE_FILES ${SOURCE_FILES} ${JOYSTICK_VIRTUAL_SOURCES})
   endif()
+  if(JOYSTICK_TRANSLATOR)
+  set(SDL_JOYSTICK_TRANSLATOR 1)
+  file(GLOB JOYSTICK_TRANSLATOR_SOURCES ${SDL2_SOURCE_DIR}/src/joystick/translator/*.c)
+  set(SOURCE_FILES ${SOURCE_FILES} ${JOYSTICK_TRANSLATOR_SOURCES})
+  endif()
 endif()
 
 if(SDL_VIDEO)
diff --git a/configure.ac b/configure.ac
index 2dbfd29f5e..210a74b399 100644
--- a/configure.ac
+++ b/configure.ac
@@ -3528,6 +3528,19 @@ CheckVirtualJoystick()
     fi
 }
 
+dnl Set up the Translator joystick driver.
+CheckTranslatorJoystick()
+{
+    AC_ARG_ENABLE(joystick-translator,
+[AS_HELP_STRING([--enable-joystick-translator], [enable joystick translator [default=yes]])],
+                  , enable_joystick_translator=yes)
+    if test x$enable_joystick = xyes -a x$enable_joystick_translator = xyes; then
+        AC_DEFINE(SDL_JOYSTICK_TRANSLATOR, 1, [ ])
+        SOURCES="$SOURCES $srcdir/src/joystick/translator/*.c"
+        have_joystick_translated=yes
+    fi
+}
+
 dnl Do this on all platforms, before everything else (other things might want to override it).
 CheckWarnAll
 CheckNoStrictAliasing
@@ -4297,6 +4310,9 @@ esac
 dnl Permit use of virtual joystick APIs on any platform (subject to configure options)
 CheckVirtualJoystick
 
+dnl Permit use of translator joysticks on any platform (subject to configure options)
+CheckTranslatorJoystick
+
 # Check whether to install sdl2-config
 AC_MSG_CHECKING(whether to install sdl2-config)
 AC_ARG_ENABLE([sdl2-config],
@@ -4535,6 +4551,11 @@ if test x$have_joystick_virtual = xyes; then
 else
     SUMMARY="${SUMMARY}Enable virtual joystick APIs : NO\n"
 fi
+if test x$have_joystick_translated = xyes; then
+    SUMMARY="${SUMMARY}Enable translated joystick APIs : YES\n"
+else
+    SUMMARY="${SUMMARY}Enable translated joystick APIs : NO\n"
+fi
 if test x$have_samplerate_h_hdr = xyes; then
     SUMMARY="${SUMMARY}Using libsamplerate : YES\n"
 else
diff --git a/include/SDL_config.h.cmake b/include/SDL_config.h.cmake
index 511ffc0d84..13c596e03e 100644
--- a/include/SDL_config.h.cmake
+++ b/include/SDL_config.h.cmake
@@ -320,6 +320,7 @@
 #cmakedefine SDL_JOYSTICK_RAWINPUT @SDL_JOYSTICK_RAWINPUT@
 #cmakedefine SDL_JOYSTICK_EMSCRIPTEN @SDL_JOYSTICK_EMSCRIPTEN@
 #cmakedefine SDL_JOYSTICK_VIRTUAL @SDL_JOYSTICK_VIRTUAL@
+#cmakedefine SDL_JOYSTICK_TRANSLATOR @SDL_JOYSTICK_TRANSLATOR@
 #cmakedefine SDL_JOYSTICK_VITA @SDL_JOYSTICK_VITA@
 #cmakedefine SDL_HAPTIC_DUMMY @SDL_HAPTIC_DUMMY@
 #cmakedefine SDL_HAPTIC_LINUX @SDL_HAPTIC_LINUX@
diff --git a/include/SDL_config.h.in b/include/SDL_config.h.in
index ea877237cd..a3af8ade54 100644
--- a/include/SDL_config.h.in
+++ b/include/SDL_config.h.in
@@ -318,6 +318,7 @@
 #undef SDL_JOYSTICK_RAWINPUT
 #undef SDL_JOYSTICK_EMSCRIPTEN
 #undef SDL_JOYSTICK_VIRTUAL
+#undef SDL_JOYSTICK_TRANSLATOR
 #undef SDL_HAPTIC_DUMMY
 #undef SDL_HAPTIC_ANDROID
 #undef SDL_HAPTIC_LINUX
diff --git a/include/SDL_config_android.h b/include/SDL_config_android.h
index 09d00d242a..ad30f10955 100644
--- a/include/SDL_config_android.h
+++ b/include/SDL_config_android.h
@@ -149,6 +149,7 @@
 #define SDL_JOYSTICK_ANDROID    1
 #define SDL_JOYSTICK_HIDAPI     1
 #define SDL_JOYSTICK_VIRTUAL    1
+/* #undef SDL_JOYSTICK_TRANSLATOR */
 #define SDL_HAPTIC_ANDROID  1
 
 /* Enable sensor driver */
diff --git a/include/SDL_config_iphoneos.h b/include/SDL_config_iphoneos.h
index 9a748beb66..f4a1a2d579 100644
--- a/include/SDL_config_iphoneos.h
+++ b/include/SDL_config_iphoneos.h
@@ -147,6 +147,7 @@
 /*#define SDL_JOYSTICK_HIDAPI 1*/
 #define SDL_JOYSTICK_MFI 1
 #define SDL_JOYSTICK_VIRTUAL    1
+/* #undef SDL_JOYSTICK_TRANSLATOR */
 
 #ifdef __TVOS__
 #define SDL_SENSOR_DUMMY    1
diff --git a/include/SDL_config_macosx.h b/include/SDL_config_macosx.h
index ec18866232..ec462340a1 100644
--- a/include/SDL_config_macosx.h
+++ b/include/SDL_config_macosx.h
@@ -154,6 +154,7 @@
 #define SDL_JOYSTICK_HIDAPI 1
 #define SDL_JOYSTICK_IOKIT  1
 #define SDL_JOYSTICK_VIRTUAL    1
+/* #undef SDL_JOYSTICK_TRANSLATOR */
 #define SDL_HAPTIC_IOKIT    1
 
 /* The MFI controller support requires ARC Objective C runtime */
diff --git a/include/SDL_config_os2.h b/include/SDL_config_os2.h
index 075753fc7f..d316b90aff 100644
--- a/include/SDL_config_os2.h
+++ b/include/SDL_config_os2.h
@@ -37,6 +37,7 @@
 /*#undef SDL_JOYSTICK_OS2 */
 /*#undef SDL_JOYSTICK_HIDAPI */
 /*#undef SDL_JOYSTICK_VIRTUAL */
+/*#undef SDL_JOYSTICK_TRANSLATOR */
 
 #define SDL_SENSOR_DUMMY 1
 #define SDL_VIDEO_DRIVER_DUMMY 1
diff --git a/include/SDL_config_pandora.h b/include/SDL_config_pandora.h
index d57a79f22c..9dc962c926 100644
--- a/include/SDL_config_pandora.h
+++ b/include/SDL_config_pandora.h
@@ -118,6 +118,7 @@
 #define SDL_INPUT_LINUXEV 1
 #define SDL_JOYSTICK_LINUX 1
 #define SDL_JOYSTICK_VIRTUAL 1
+/* #undef SDL_JOYSTICK_TRANSLATOR */
 #define SDL_HAPTIC_LINUX 1
 
 #define SDL_SENSOR_DUMMY 1
diff --git a/include/SDL_config_psp.h b/include/SDL_config_psp.h
index 53d4ca6925..0e82efc94b 100644
--- a/include/SDL_config_psp.h
+++ b/include/SDL_config_psp.h
@@ -137,6 +137,7 @@
 /* Enable the PSP joystick driver (src/joystick/psp/\*.c) */
 #define SDL_JOYSTICK_PSP        1
 #define SDL_JOYSTICK_VIRTUAL    1
+/* #undef SDL_JOYSTICK_TRANSLATOR */
 
 /* Enable the dummy sensor driver */
 #define SDL_SENSOR_DUMMY  1
diff --git a/include/SDL_config_windows.h b/include/SDL_config_windows.h
index 33436c41c8..53cb90629e 100644
--- a/include/SDL_config_windows.h
+++ b/include/SDL_config_windows.h
@@ -229,6 +229,7 @@ typedef unsigned int uintptr_t;
 #define SDL_JOYSTICK_RAWINPUT   1
 #endif
 #define SDL_JOYSTICK_VIRTUAL    1
+/* #undef SDL_JOYSTICK_TRANSLATOR */
 #ifdef SDL_WINDOWS10_SDK
 #define SDL_JOYSTICK_WGI    1
 #endif
diff --git a/include/SDL_config_winrt.h b/include/SDL_config_winrt.h
index c6d5c135a9..acafcafc8b 100644
--- a/include/SDL_config_winrt.h
+++ b/include/SDL_config_winrt.h
@@ -201,6 +201,7 @@ typedef unsigned int uintptr_t;
 #define SDL_HAPTIC_DISABLED 1
 #else
 #define SDL_JOYSTICK_VIRTUAL    1
+/* #undef SDL_JOYSTICK_TRANSLATOR */
 #define SDL_JOYSTICK_XINPUT 1
 #define SDL_HAPTIC_XINPUT   1
 #endif
diff --git a/include/SDL_config_wiz.h b/include/SDL_config_wiz.h
index 7c552f257e..b7b1e48457 100644
--- a/include/SDL_config_wiz.h
+++ b/include/SDL_config_wiz.h
@@ -134,6 +134,7 @@
 #define SDL_INPUT_LINUXEV 1
 #define SDL_JOYSTICK_LINUX 1
 #define SDL_JOYSTICK_VIRTUAL 1
+/* #undef SDL_JOYSTICK_TRANSLATOR */
 #define SDL_HAPTIC_LINUX 1
 
 #define SDL_SENSOR_DUMMY  1
diff --git a/src/joystick/SDL_joystick.c b/src/joystick/SDL_joystick.c
index 1bab305b0b..014c1ea32f 100644
--- a/src/joystick/SDL_joystick.c
+++ b/src/joystick/SDL_joystick.c
@@ -92,6 +92,9 @@ static SDL_JoystickDriver *SDL_joystick_drivers[] = {
 #ifdef SDL_JOYSTICK_PSP
     &SDL_PSP_JoystickDriver,
 #endif
+#ifdef SDL_JOYSTICK_TRANSLATOR
+    &SDL_TRANSLATOR_JoystickDriver,
+#endif
 #ifdef SDL_JOYSTICK_VIRTUAL
     &SDL_VIRTUAL_JoystickDriver,
 #endif
diff --git a/src/joystick/SDL_sysjoystick.h b/src/joystick/SDL_sysjoystick.h
index 91c9a7c6c3..1936d9bdb0 100644
--- a/src/joystick/SDL_sysjoystick.h
+++ b/src/joystick/SDL_sysjoystick.h
@@ -208,6 +208,7 @@ extern SDL_JoystickDriver SDL_RAWINPUT_JoystickDriver;
 extern SDL_JoystickDriver SDL_IOS_JoystickDriver;
 extern SDL_JoystickDriver SDL_LINUX_JoystickDriver;
 extern SDL_JoystickDriver SDL_VIRTUAL_JoystickDriver;
+extern SDL_JoystickDriver SDL_TRANSLATOR_JoystickDriver;
 extern SDL_JoystickDriver SDL_WGI_JoystickDriver;
 extern SDL_JoystickDriver SDL_WINDOWS_JoystickDriver;
 extern SDL_JoystickDriver SDL_WINMM_JoystickDriver;
diff --git a/src/joystick/translator/SDL_translator.c b/src/joystick/translator/SDL_translator.c
new file mode 100644
index 0000000000..75e3f6edfb
--- /dev/null
+++ b/src/joystick/translator/SDL_translator.c
@@ -0,0 +1,492 @@
+/*
+  Simple DirectMedia Layer
+  Copyright (C) 2021 Paul Cercueil <paul@crapouillou.net>
+
+  This software is provided 'as-is', without any express or implied
+  warranty.  In no event will the authors be held liable for any damages
+  arising from the use of this software.
+
+  Permission is granted to anyone to use this software for any purpose,
+  including commercial applications, and to alter it and redistribute it
+  freely, subject to the following restrictions:
+
+  1. The origin of this software must not be misrepresented; you must not
+     claim that you wrote the original software. If you use this software
+     in a product, an acknowledgment in the product documentation would be
+     appreciated but is not required.
+  2. Altered source versions must be plainly marked as such, and must not be
+     misrepresented as being the original software.
+  3. This notice may not be removed or altered from any source distribution.
+*/
+#include "../../SDL_internal.h"
+
+#ifdef SDL_JOYSTICK_TRANSLATOR
+
+#include "SDL_joystick.h"
+#include "SDL_keyboard.h"
+#include "../SDL_sysjoystick.h"
+#include "../SDL_joystick_c.h"
+
+static int num_translator_joysticks;
+
+enum SDL_translator_item_type
+{
+    SDL_TRANSLATOR_AXIS,
+    SDL_TRANSLATOR_HAT,
+    SDL_TRANSLATOR_BUTTON,
+};
+
+enum SDL_translator_item_source
+{
+    SDL_TRANSLATOR_SOURCE_JOYSTICK,
+    SDL_TRANSLATOR_SOURCE_KEYBOARD,
+};
+
+typedef struct SDL_translator_item
+{
+    enum SDL_translator_item_type type;
+    enum SDL_translator_item_source source;
+
+    SDL_Joystick *joystick;
+    int device_index;
+    int srccode[4];
+    int dstcode;
+
+    struct SDL_translator_item *next;
+} SDL_translator_item;
+
+typedef struct SDL_translator_joystick
+{
+    unsigned int naxes, nbuttons, nhats;
+    int device_index;
+    SDL_JoystickID joystickid;
+    char *name;
+
+    struct SDL_translator_item *items;
+    struct SDL_translator_joystick *next;
+} SDL_translator_joystick;
+
+static SDL_translator_joystick *SDL_joylist;
+
+static int
+ProcessMap(char *map, char delimiter, int (*cb)(char *, void *), void *d)
+{
+    char *delim;
+    int ret;
+
+    while (map != NULL) {
+        delim = SDL_strchr(map, delimiter);
+        if (delim != NULL) {
+            *delim++ = '\0';
+        }
+        ret = (*cb)(map, d);
+        if (ret < 0) {
+            return ret;
+        }
+
+        map = delim;
+    }
+
+    return 0;
+}
+
+static int
+ProcessDeviceItem(char *map, void *d)
+{
+    SDL_translator_joystick *joystick = d;
+    enum SDL_translator_item_type type;
+    enum SDL_translator_item_source source;
+    SDL_translator_item *item;
+    SDL_JoystickGUID guid, guid2;
+    int numjoysticks, i, device_index = 0;
+    int dstcode, nb_codes;
+    char *end;
+
+    if (!SDL_strncmp(map, "axis:", sizeof("axis:") - 1)) {
+        dstcode = joystick->naxes++;
+        map += sizeof("axis:") - 1;
+        type = SDL_TRANSLATOR_AXIS;
+    } else if (!SDL_strncmp(map, "hat:", sizeof("hat:") - 1)) {
+        dstcode = joystick->nhats++;
+        map += sizeof("hat:") - 1;
+        type = SDL_TRANSLATOR_HAT;
+    } else if (!SDL_strncmp(map, "btn:", sizeof("btn:") - 1)) {
+        dstcode = joystick->nbuttons++;
+        map += sizeof("btn:") - 1;
+        type = SDL_TRANSLATOR_BUTTON;
+    } else {
+        return SDL_SetError("Invalid device map");
+    }
+
+    if (!SDL_strncmp(map, "kb:", sizeof("kb:") - 1)) {
+        if (type == SDL_TRANSLATOR_AXIS) {
+            return SDL_SetError("Cannot use keyboard key for axis");
+        }
+
+        source = SDL_TRANSLATOR_SOURCE_KEYBOARD;
+    } else {
+        guid = SDL_JoystickGetGUIDFromString(map);
+        numjoysticks = SDL_NumJoysticks();
+
+        for (i = 0; i < numjoysticks; i++) {
+            guid2 = SDL_JoystickGetDeviceGUID(i);
+
+            if (!SDL_memcmp(&guid, &guid2, sizeof(guid))) {
+                break;
+            }
+        }
+
+        if (i == numjoysticks) {
+            return SDL_SetError("Invalid device in map");
+        }
+
+        device_index = i;
+        source = SDL_TRANSLATOR_SOURCE_JOYSTICK;
+    }
+
+    map = SDL_strchr(map, ':');
+    if (!map) {
+        return SDL_SetError("Invalid device map");
+    }
+
+    map += 1;
+
+    if (type == SDL_TRANSLATOR_HAT && source == SDL_TRANSLATOR_SOURCE_KEYBOARD)
+        nb_codes = 4;
+    else
+        nb_codes = 1;
+
+    item = SDL_calloc(1, sizeof(*item));
+    if (item == NULL)
+        return SDL_OutOfMemory();
+
+    item->device_index = device_index;
+    item->dstcode = dstcode;
+    item->type = type;
+    item->source = source;
+
+    for (i = 0; i < nb_codes; i++) {
+        item->srccode[i] = (int) SDL_strtol(map, &end, 10);
+
+        if (end == map ||
+            (i == nb_codes - 1 && *end != '\0') ||
+            (i < nb_codes - 1 && *end != ':')) {
+            SDL_free(item);
+            return SDL_SetError("Invalid device map");
+        }
+
+        map = end + 1;
+    }
+
+    item->next = joystick->items;
+    joystick->items = item;
+
+    return 0;
+}
+
+static void
+FreeJoystick(SDL_translator_joystick *joystick)
+{
+    SDL_translator_item *item, *next;
+
+    for (item = joystick->items; item; item = next) {
+        next = item->next;
+        SDL_free(item);
+    }
+
+    SDL_free(joystick->name);
+    SDL_free(joystick);
+}
+
+static int
+ProcessDevice(char *map, void *d)
+{
+    SDL_translator_joystick *joystick;
+    char *comma, *name;
+    int ret;
+
+    comma = SDL_strchr(map, ',');
+    if (comma == NULL) {
+        return SDL_SetError("Invalid device map");
+    }
+
+    *comma = '\0';
+
+    joystick = SDL_calloc(1, sizeof(*joystick));
+    name = SDL_strdup(map);
+    if (joystick == NULL || name == NULL) {
+        SDL_free(joystick);
+        SDL_free(name);
+        return SDL_OutOfMemory();
+    }
+
+    joystick->name = name;
+    map = comma + 1;
+
+    ret = ProcessMap(map, ',', ProcessDeviceItem, joystick);
+    if (ret) {
+        FreeJoystick(joystick);
+        return ret;
+    }
+
+    joystick->joystickid = SDL_GetNextJoystickInstanceID();
+
+    joystick->next = SDL_joylist;
+    SDL_joylist = joystick;
+    num_translator_joysticks++;
+
+    SDL_PrivateJoystickAdded(joystick->joystickid);
+
+    return 0;
+}
+
+static int
+TRANSLATOR_JoystickInit(void)
+{
+    char *map;
+    int ret;
+
+    map = SDL_getenv("SDL_JOYSTICK_TRANSLATOR_MAP");
+
+    if (map == NULL) {
+        return 0;
+    }
+
+    map = SDL_strdup(map);
+    if (map == NULL) {
+        return SDL_OutOfMemory();
+    }
+
+    ret = ProcessMap(map, ';', ProcessDevice, NULL);
+
+    SDL_free(map);
+
+    return ret;
+}
+
+static int
+TRANSLATOR_JoystickGetCount(void)
+{
+    return num_translator_joysticks;
+}
+
+static void
+TRANSLATOR_JoystickDetect(void)
+{
+}
+
+static const char *
+TRANSLATOR_JoystickGetDeviceName(int device_index)
+{
+    SDL_translator_joystick *js;
+
+    for (js = SDL_joylist; js; js = js->next) {
+        if (js->device_index == device_index) {
+            return js->name;
+        }
+    }
+
+    return "Translated joystick";
+}
+
+static int
+TRANSLATOR_JoystickGetDevicePlayerIndex(int device_index)
+{
+    return -1;
+}
+
+static void
+TRANSLATOR_JoystickSetDevicePlayerIndex(int device_index, int player_index)
+{
+}
+
+static SDL_JoystickGUID TRANSLATOR_JoystickGetDeviceGUID(int device_index)
+{
+    SDL_JoystickGUID guid;
+    /* the GUID is just the first 16 chars of the name for now */
+    const char *name = TRANSLATOR_JoystickGetDeviceName(device_index);
+    SDL_zero(guid);
+    SDL_memcpy(&guid, name, SDL_min(sizeof(guid), SDL_strlen(name)));
+    return guid;
+}
+
+/* Function to perform the mapping from device index to the instance id for this index */
+static SDL_JoystickID TRANSLATOR_JoystickGetDeviceInstanceID(int device_index)
+{
+    SDL_translator_joystick *js;
+
+    for (js = SDL_joylist; js; js = js->next) {
+        if (js->device_index == device_index) {
+            return js->joystickid;
+        }
+    }
+
+    return -1;
+}
+
+static int
+TRANSLATOR_JoystickRumble(SDL_Joystick *joystick, Uint16 low_frequency_rumble,
+                          Uint16 high_frequency_rumble)
+{
+    return SDL_Unsupported();
+}
+
+static int
+TRANSLATOR_JoystickRumbleTriggers(SDL_Joystick *joystick,
+                                  Uint16 left_rumble, Uint16 right_rumble)
+{
+    return SDL_Unsupported();
+}
+
+static SDL_bool TRANSLATOR_JoystickHasLED(SDL_Joystick *joystick)
+{
+    return SDL_FALSE;
+}
+
+static int
+TRANSLATOR_JoystickSetLED(SDL_Joystick *joystick, Uint8 red,
+                          Uint8 green, Uint8 blue)
+{
+    return SDL_Unsupported();
+}
+
+static int TRANSLATOR_JoystickSetSensorsEnabled(SDL_Joystick *joystick,
+                                                SDL_bool enabled)
+{
+    return SDL_Unsupported();
+}
+
+static void TRANSLATOR_JoystickUpdate(SDL_Joystick *joystick)
+{
+    SDL_translator_joystick *js = (SDL_translator_joystick *) joystick->hwdata;
+    SDL_translator_item *item;
+    const Uint8 *kbstate = SDL_GetKeyboardState(NULL);
+    Uint8 value;
+    int i;
+
+    for (item = js->items; item; item = item->next) {
+        if (item->type == SDL_TRANSLATOR_AXIS) {
+            Sint16 axis_value = SDL_JoystickGetAxis(item->joystick, item->srccode[0]);
+            SDL_PrivateJoystickAxis(joystick, item->dstcode, axis_value);
+        } else if (item->type == SDL_TRANSLATOR_HAT) {
+            if (item->source == SDL_TRANSLATOR_SOURCE_KEYBOARD) {
+                for (value = 0, i = 0; i < 4; i++) {
+                    if (kbstate[item->srccode[i]]) {
+                        value |= 1 << i;
+                    }
+                }
+            } else {
+                value = SDL_JoystickGetHat(item->joystick, item->srccode[0]);
+            }
+
+            SDL_PrivateJoystickHat(joystick, item->dstcode, value);
+        } else {
+            if (item->source == SDL_TRANSLATOR_SOURCE_KEYBOARD) {
+                value = kbstate[item->srccode[0]];
+            } else {
+                value = SDL_JoystickGetButton(item->joystick, item->srccode[0]);
+            }
+
+            SDL_PrivateJoystickButton(joystick, item->dstcode, value);
+        }
+    }
+}
+
+static int TRANSLATOR_JoystickOpen(SDL_Joystick *joystick, int device_index)
+{
+    SDL_translator_joystick *js;
+    SDL_translator_item *item, *item2;
+
+    for (js = SDL_joylist; js; js = js->next) {
+        if (js->device_index == device_index) {
+            break;
+        }
+    }
+
+    if (js == NULL) {
+        return SDL_SetError("No such device");
+    }
+
+    joystick->naxes = js->naxes;
+    joystick->nbuttons = js->nbuttons;
+    joystick->nhats = js->nhats;
+
+    for (item = js->items; item; item = item->next) {
+        item->joystick = SDL_JoystickOpen(item->device_index);
+        if (!item->joystick) {
+            for (item2 = js->items; item2 != item; item2 = item2->next) {
+                SDL_JoystickClose(item2->joystick);
+                item2->joystick = NULL;
+            }
+
+            return SDL_SetError("Unable to open joystick");
+        }
+    }
+
+    joystick->hwdata = (struct joystick_hwdata *) js;
+
+    return 0;
+}
+
+static void TRANSLATOR_JoystickClose(SDL_Joystick *joystick)
+{
+    SDL_translator_joystick *js = (SDL_translator_joystick *) joystick->hwdata;
+    SDL_translator_item *item;
+
+    for (item = js->items; item; item = item->next) {
+        SDL_JoystickClose(item->joystick);
+        item->joystick = NULL;
+    }
+}
+
+void
+TRANSLATOR_JoystickQuit(void)
+{
+    SDL_translator_joystick *next;
+
+    while (SDL_joylist) {
+        next = SDL_joylist->next;
+
+        FreeJoystick(SDL_joylist);
+        SDL_joylist = next;
+    }
+}
+
+static SDL_bool
+TRANSLATOR_JoystickGetGamepadMapping(int device_index, SDL_GamepadMapping *out)
+{
+    return SDL_FALSE;
+}
+
+static int
+TRANSLATOR_JoystickSendEffect(SDL_Joystick *joystick, const void *data, int size)
+{
+    return SDL_Unsupported();
+}
+
+SDL_JoystickDriver SDL_TRANSLATOR_JoystickDriver =
+{
+    TRANSLATOR_JoystickInit,
+    TRANSLATOR_JoystickGetCount,
+    TRANSLATOR_JoystickDetect,
+    TRANSLATOR_JoystickGetDeviceName,
+    TRANSLATOR_JoystickGetDevicePlayerIndex,
+    TRANSLATOR_JoystickSetDevicePlayerIndex,
+    TRANSLATOR_JoystickGetDeviceGUID,
+    TRANSLATOR_JoystickGetDeviceInstanceID,
+    TRANSLATOR_JoystickOpen,
+    TRANSLATOR_JoystickRumble,
+    TRANSLATOR_JoystickRumbleTriggers,
+    TRANSLATOR_JoystickHasLED,
+    TRANSLATOR_JoystickSetLED,
+    TRANSLATOR_JoystickSendEffect,
+    TRANSLATOR_JoystickSetSensorsEnabled,
+    TRANSLATOR_JoystickUpdate,
+    TRANSLATOR_JoystickClose,
+    TRANSLATOR_JoystickQuit,
+    TRANSLATOR_JoystickGetGamepadMapping
+};
+
+#endif /* SDL_JOYSTICK_TRANSLATOR */
+
+/* vi: set ts=4 sw=4 expandtab: */
-- 
2.33.0

